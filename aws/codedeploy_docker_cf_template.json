{
  "AWSTemplateFormatVersion" : "2010-09-09",
  "Description" : "AWS CloudFormation Template to launch two instances with CodeDeployMiddleman via Auto Scaling with Launch Configurations. Questions, please contact fontesj@",
  "Parameters" : {
    "KeyName" : {
      "Description" : "Name of an existing EC2 KeyPair to enable SSH access to the instances",
      "Type" : "AWS::EC2::KeyPair::KeyName",
      "MinLength" : "1",
      "MaxLength" : "255",
      "AllowedPattern" : "[\\x20-\\x7E]*",
      "ConstraintDescription" : "can contain only ASCII characters."
    },
    "TagKey" : {
      "Description" : "The EC2 tag key that identifies this as a target for deployments.",
      "Type" : "String",
      "Default" : "CodeDeployMiddleman",
      "AllowedPattern" : "[\\x20-\\x7E]*",
      "ConstraintDescription" : "Can contain only ASCII characters."
    },
    "TagValue" : {
      "Description" : "The EC2 tag value that identifies this as a target for deployments.",
      "Type" : "String",
      "Default" : "CodeDeployMiddlemanDemo",
      "AllowedPattern" : "[\\x20-\\x7E]*",
      "ConstraintDescription" : "Can contain only ASCII characters."
    }
  },
  "Mappings" : {
    "RegionOS2AMI" : {
      "us-east-1" : {
        "Linux" : "ami-146e2a7c"
      },
      "us-west-1" : {
        "Linux" : "ami-42908907"
      },
      "us-west-2" : {
        "Linux" : "ami-dfc39aef"
      }
    }
  },
  "Resources" : {
    "LaunchConfig" : {
      "Type" : "AWS::AutoScaling::LaunchConfiguration",
      "Metadata" : {
        "Comment" : "Create CodeDeployMiddleman Instances",
        "AWS::CloudFormation::Init" : {
          "config" : {
            "packages" : {
              "yum" : {
                "httpd"              : [],
                "git-all"            : [],
                "jq"                 : [],
                "tmux"               : [],
                "zsh"                : [],
                "python27"           : [],
                "docker"             : []
              }
            },
            "files" : {
              "/etc/cfn/cfn-hup.conf" : {
                "content" : {
                  "Fn::Join" : [
                    "",
                    [
                      "[main]\n",
                      "stack=",
                      {
                        "Ref" : "AWS::StackId"
                      },
                      "\n",
                      "region=",
                      {
                        "Ref" : "AWS::Region"
                      },
                      "\n"
                    ]
                  ]
                },
                "mode" : "000400",
                "owner" : "root",
                "group" : "root"
              },
              "/etc/cfn/hooks.d/cfn-auto-reloader.conf" : {
                "content" : {
                  "Fn::Join" : [
                    "",
                    [
                      "[cfn-auto-reloader-hook]\n",
                      "triggers=post.update\n",
                      "path=Resources.LaunchConfig.Metadata.AWS::CloudFormation::Init\n",
                      "action=/opt/aws/bin/cfn-init -v ",
                      "         --stack ",
                      {
                        "Ref" : "AWS::StackName"
                      },
                      "         --resource LaunchConfig ",
                      "         --region ",
                      {
                        "Ref" : "AWS::Region"
                      },
                      "\n",
                      "runas=root\n"
                    ]
                  ]
                }
              }
            },
            "services" : {
              "sysvinit" : {
                "httpd" : {
                  "enabled" : "true",
                  "ensureRunning" : "true"
                },
                "cfn-hup" : {
                  "enabled" : "true",
                  "ensureRunning" : "true",
                  "files" : [
                    "/etc/cfn/cfn-hup.conf",
                    "/etc/cfn/hooks.d/cfn-auto-reloader.conf"
                  ]
                },
                "codedeploy-agent" : {
                  "enabled" : "true",
                  "ensureRunning" : "true"
                },
                "docker": {
                  "enabled": "true",
                  "ensureRunning": "true"
                }
              }
            }
          }
        }
      },
      "Properties" : {
        "ImageId" : {
          "Fn::FindInMap" : [
            "RegionOS2AMI",
            {
              "Ref" : "AWS::Region"
            },
            "Linux"
          ]
        },
        "InstanceType" : "t2.micro",
        "KeyName" : {
          "Ref" : "KeyName"
        },
        "SecurityGroups" : [
          {
            "Ref" : "InstanceSecurityGroup"
          }
        ],
        "UserData" : {
          "Fn::Base64" : {
            "Fn::Join" : [
              "",
              [
                "#!/bin/bash -xe\n",
                "yum update -y aws-cfn-bootstrap; yum install -y aws-cli\n",
                "# Install the AWS CodeDeployMiddleman Agent.\n",
                "cd /home/ec2-user/\n",
                "aws s3 cp 's3://aws-codedeploy-us-east-1/latest/codedeploy-agent.noarch.rpm' . || error_exit 'Failed to download AWS CodeDeployMiddleman Agent.'\n",
                "yum -y install codedeploy-agent.noarch.rpm || error_exit 'Failed to install AWS CodeDeployMiddleman Agent.' \n",

                "curl -o /usr/local/bin/docker-compose -L https://github.com/docker/compose/releases/download/1.1.0/docker-compose-`uname -s`-`uname -m`\n",
                "chmod +x /usr/local/bin/docker-compose\n",

                "/opt/aws/bin/cfn-init -v ",
                "         --stack ",
                {
                  "Ref" : "AWS::StackName"
                },
                "         --resource LaunchConfig ",
                "         --region ",
                {
                  "Ref" : "AWS::Region"
                },
                "\n",
                "/opt/aws/bin/cfn-signal -e $? ",
                "         --stack ",
                {
                  "Ref" : "AWS::StackName"
                },
                "         --resource CodeDeployMiddlemanGroup ",
                "         --region ",
                {
                  "Ref" : "AWS::Region"
                },
                "\n",
                "# All is well, so signal success.\n",
                "/opt/aws/bin/cfn-signal -e 0 -r \"AWS CodeDeployMiddleman Agent setup complete.\" '",
                {
                  "Ref" : "WaitHandle"
                },
                "'\n"
              ]
            ]
          }
        },
        "IamInstanceProfile" : {
          "Ref" : "InstanceRoleInstanceProfile"
        }
      }
    },
    "ElasticLoadBalancer" : {
      "Type" : "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties" : {
        "AvailabilityZones" : {
          "Fn::GetAZs" : ""
        },
        "CrossZone" : "true",
        "Listeners" : [
          {
            "LoadBalancerPort" : "80",
            "InstancePort" : "80",
            "Protocol" : "HTTP"
          }
        ],
        "HealthCheck" : {
          "Target" : "TCP:80",
          "HealthyThreshold" : "3",
          "UnhealthyThreshold" : "5",
          "Interval" : "30",
          "Timeout" : "5"
        }
      }
    },
    "InstanceSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Enable SSH access and HTTP access on the configured port",
        "SecurityGroupIngress" : [
          {
            "IpProtocol" : "tcp",
            "FromPort" : "22",
            "ToPort" : "22",
            "CidrIp" : "0.0.0.0/0"
          },
          {
            "IpProtocol" : "tcp",
            "FromPort" : "80",
            "ToPort" : "80",
            "CidrIp" : "0.0.0.0/0"
          }
        ]
      }
    },
    "WaitHandle" : {
      "Type" : "AWS::CloudFormation::WaitConditionHandle"
    },
    "WaitCondition" : {
      "Type" : "AWS::CloudFormation::WaitCondition",
      "Properties" : {
        "Handle" : {
          "Ref" : "WaitHandle"
        },
        "Timeout" : "900",
        "Count" : "2"
      },
      "DependsOn" : "CodeDeployMiddlemanGroup"
    },
    "CodeDeployMiddlemanTrustRole" : {
      "Type" : "AWS::IAM::Role",
      "Properties" : {
        "AssumeRolePolicyDocument" : {
          "Statement" : [
            {
              "Sid" : "1",
              "Effect" : "Allow",
              "Principal" : {
                "Service" : [
                  "codedeploy.us-east-1.amazonaws.com",
                  "codedeploy.us-west-2.amazonaws.com"
                ]
              },
              "Action" : "sts:AssumeRole"
            }
          ]
        },
        "Path" : "/"
      }
    },
    "CodeDeployMiddlemanRolePolicies" : {
      "Type" : "AWS::IAM::Policy",
      "Properties" : {
        "PolicyName" : "CodeDeployMiddlemanPolicy",
        "PolicyDocument" : {
          "Statement" : [
            {
              "Effect" : "Allow",
              "Resource" : [
                "*"
              ],
              "Action" : [
                "ec2:Describe*"
              ]
            },
            {
              "Effect" : "Allow",
              "Resource" : [
                "*"
              ],
              "Action" : [
                "autoscaling:CompleteLifecycleAction",
                "autoscaling:DeleteLifecycleHook",
                "autoscaling:DescribeLifecycleHooks",
                "autoscaling:DescribeAutoScalingGroups",
                "autoscaling:PutLifecycleHook",
                "autoscaling:RecordLifecycleActionHeartbeat"
              ]
            }
          ]
        },
        "Roles" : [
          {
            "Ref" : "CodeDeployMiddlemanTrustRole"
          }
        ]
      }
    },
    "InstanceRole" : {
      "Type" : "AWS::IAM::Role",
      "Properties" : {
        "AssumeRolePolicyDocument" : {
          "Statement" : [
            {
              "Effect" : "Allow",
              "Principal" : {
                "Service" : [
                  "ec2.amazonaws.com"
                ]
              },
              "Action" : [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path" : "/"
      }
    },
    "InstanceRolePolicies" : {
      "Type" : "AWS::IAM::Policy",
      "Properties" : {
        "PolicyName" : "InstanceRole",
        "PolicyDocument" : {
          "Statement" : [
            {
              "Effect" : "Allow",
              "Action" : [
                "autoscaling:Describe*",
                "cloudformation:Describe*",
                "cloudformation:GetTemplate",
                "s3:Get*"
              ],
              "Resource" : "*"
            }
          ]
        },
        "Roles" : [
          {
            "Ref" : "InstanceRole"
          }
        ]
      }
    },
    "InstanceRoleInstanceProfile" : {
      "Type" : "AWS::IAM::InstanceProfile",
      "Properties" : {
        "Path" : "/",
        "Roles" : [
          {
            "Ref" : "InstanceRole"
          }
        ]
      }
    },
    "CircleCIUserIAM" : {
      "Type" : "AWS::IAM::User",
      "Properties" : {
        "Path" : "/",
        "Policies" : [
          {
            "PolicyName" : "S3UploadPolicy",
            "PolicyDocument" : {
              "Version" : "2012-10-17",
              "Statement" : [
                {
                  "Effect" : "Allow",
                  "Action" : [
                    "s3:*"
                  ],
                  "Resource" : [
                    "*"
                  ]
                }
              ]
            }
          },
          {
            "PolicyName" : "CodeDeployMiddlemanPolicy",
            "PolicyDocument" : {
              "Version" : "2012-10-17",
              "Statement" : [
                {
                  "Effect" : "Allow",
                  "Action" : [
                    "codedeploy:RegisterApplicationRevision",
                    "codedeploy:GetApplicationRevision"
                  ],
                  "Resource" : [
                    "*"
                  ]
                },
                {
                  "Effect" : "Allow",
                  "Action" : [
		    "codedeploy:CreateDeployment",
                    "codedeploy:GetDeployment",
                    "codedeploy:GetDeploymentConfig"
                  ],
                  "Resource" : [
                    "*"
                  ]
                }
              ]
            }
          }
        ]
      }
    },
    "CircleCIAccessKey" : {
      "Type" : "AWS::IAM::AccessKey",
      "Properties" : {
        "UserName" : {
          "Ref" : "CircleCIUserIAM"
        }
      }
    },
    "CodeDeployMiddlemanGroup" : {
      "Type" : "AWS::AutoScaling::AutoScalingGroup",
      "Properties" : {
        "AvailabilityZones" : {
          "Fn::GetAZs" : ""
        },
        "LaunchConfigurationName" : {
          "Ref" : "LaunchConfig"
        },
        "MinSize" : "2",
        "MaxSize" : "2",
        "LoadBalancerNames" : [
          {
            "Ref" : "ElasticLoadBalancer"
          }
        ],
        "Tags" : [
          {
            "Key" : {
              "Ref" : "TagKey"
            },
            "Value" : {
              "Ref" : "TagValue"
            },
            "PropagateAtLaunch" : true
          },
          {
            "Key" : "Name",
            "Value" : "CodeDeployMiddlemanCFAutoScaling",
            "PropagateAtLaunch" : true
          }
        ]
      },
      "CreationPolicy" : {
        "ResourceSignal" : {
          "Timeout" : "PT15M",
          "Count" : "2"
        }
      },
      "UpdatePolicy" : {
        "AutoScalingRollingUpdate" : {
          "MinInstancesInService" : "1",
          "MaxBatchSize" : "1",
          "PauseTime" : "PT15M",
          "WaitOnResourceSignals" : "true"
        }
      }
    }
  },
  "Outputs" : {
    "CodeDeployMiddlemanTrustRoleARN" : {
      "Value" : {
        "Fn::GetAtt" : [
          "CodeDeployMiddlemanTrustRole",
          "Arn"
        ]
      }
    },
    "AccessKeyforCircleCIUserIAM" : {
      "Value" : {
        "Ref" : "CircleCIAccessKey"
      },
      "Description" : "Access Key used for CircleCI CodeDeployMiddleman integration."
    },
    "SecretKeyforCircleCIUserIAM" : {
      "Value" : {
        "Fn::GetAtt" : [
          "CircleCIAccessKey",
          "SecretAccessKey"
        ]
      },
     "Description" : "Secret Key for use with CircleCLI CodeDeployMiddleman integration."
    },
    "URL" : {
      "Description" : "URL of ELB",
      "Value" : {
        "Fn::Join" : [
          "",
          [
            "http://",
            {
              "Fn::GetAtt" : [
                "ElasticLoadBalancer",
                "DNSName"
              ]
            }
          ]
        ]
      }
    }
  }
}
